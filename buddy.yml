---
apiVersion: v1
kind: Namespace
metadata:
  name: deedee
---
apiVersion: v1
kind: Namespace
metadata:
  name: kubenyx
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deployment
  namespace: deedee
spec:
  replicas: 5
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: myapp-container
        image: nginx
        resources:
          limits:
            cpu: "500m"
            memory: "256Mi"
        livenessProbe:
          httpGet:
            path: /
            port: 80
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: db-statefulset
  namespace: kubenyx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: database
  serviceName: "db-service"
  template:
    metadata:
      labels:
        app: database
    spec:
      containers:
      - name: db-container
        image: mysql
        resources:
          limits:
            cpu: "500m"
            memory: "256Mi"
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: log-daemonset
  namespace: deedee
spec:
  selector:
    matchLabels:
      name: log-agent
  template:
    metadata:
      labels:
        name: log-agent
    spec:
      containers:
      - name: log-agent
        image: busybox
        command: ["sh", "-c", "while true; do echo log-agent running; sleep 10; done"]
---
apiVersion: batch/v1
kind: Job
metadata:
  name: cleanup-job
  namespace: kubenyx
spec:
  template:
    spec:
      containers:
      - name: cleanup
        image: busybox
        command: ["sh", "-c", "echo Cleaning up"]
      restartPolicy: Never
  backoffLimit: 3
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: scheduled-task
  namespace: deedee
spec:
  schedule: "*/5 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: task
            image: busybox
            command: ["sh", "-c", "echo Running scheduled task"]
          restartPolicy: OnFailure
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: personal-info
  namespace: deedee
  labels:
    app: myapp
data:
  name: "Dheeraj"
  location: "India"
---
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
  namespace: kubenyx
  labels:
    app: secure
type: Opaque
data:
  username: "dXNlcm5hbWU="
  password: "cGFzc3dvcmQ="
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: app-pv
spec:
  capacity:
    storage: 500Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: standard
  hostPath:
    path: "/mnt/data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: app-pvc
  namespace: deedee
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Mi
  storageClassName: standard
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: app-serviceaccount
  namespace: kubenyx
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pod-reader
  namespace: deedee
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pod-reader-binding
  namespace: deedee
subjects:
- kind: ServiceAccount
  name: app-serviceaccount
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-admin-role
rules:
- apiGroups: [""]
  resources: ["*"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-admin-binding
subjects:
- kind: ServiceAccount
  name: app-serviceaccount
  namespace: kubenyx
roleRef:
  kind: ClusterRole
  name: cluster-admin-role
  apiGroup: rbac.authorization.k8s.io
